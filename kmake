#!/bin/bash
#
#  Copyright (C) 2018 Savoir-Faire Linux Inc.
#
#  Authors:
#      GaÃ«l PORTAY <gael.portay@savoirfairelinux.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

set -e

KMAKE="$0"
KMINCDIR="${KMINCDIR:-/usr/share/kmake}"
kmake_flags=( "-I$KMINCDIR/" "-f$KMINCDIR/kmakefile" )
KMFLAGS="${kmake_flags[*]}"
export KMAKE KMFLAGS KMINCDIR

usage() {
	cat <<EOF
Usage: ${0##*/} [OPTIONS] [TARGETS...] [VARIABLES...]

Runs on top of make(1) using a set of Makefiles to extend the Kbuild features.

It enhances the kernel build-system with the build of a tiny rootfs and an
additional Qemu target to emulate the linux kernel alongside a userland.

The userland is a tiny InitRAMFS cpio archive based on a static build of
busybox(1). It contains many common UNIX utilities into a single small
executable.

For a more thorough description of *make(1)*, please refers to its help.

Options:
      -h or --help              Print usage.

Targets:

      busybox                 Compile a static version of busybox(1).
      initramfs.cpio          Create the InitRAMFS cpio archive to used with the
                              kernel image.
      runqemu                 Run the kernel image and userland rootfs in
                              qemu(1).

Variables:

QEMUFLAGS                     Additional flags given to system qemu.
CMDLINE                       Set the kernel command-line.
EOF
}

parse_arguments() {
	while [ "$#" -ne 0 ]; do
		if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
			usage
			exit 0
		fi
		shift
	done
}

# Intercept -h/--help option
parse_arguments "$@"

exec make "${kmake_flags[@]}" "$@"
