#!/bin/bash
#
#  Copyright (C) 2019 GaÃ«l PORTAY
#                2018 Savoir-Faire Linux Inc.
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

set -e

KMAKE="$0"
KMINCDIR="${KMINCDIR:-/usr/share/kmake}"
kmake_flags=( "-I$KMINCDIR/" "-f$KMINCDIR/kmakefile" )
KMFLAGS="${kmake_flags[*]}"
export KMAKE KMFLAGS KMINCDIR

usage() {
	cat <<EOF
Usage: ${0##*/} [OPTIONS] [TARGETS...] [VARIABLES...]

Runs on top of make(1) using a set of Makefiles to extend the Kbuild features.

It enhances the kernel build-system with the build of a tiny rootfs and an
additional Qemu target to emulate the linux kernel alongside a userland.

The userland is a tiny InitRAMFS cpio archive based on a static build of
busybox(1). It contains many common UNIX utilities into a single small
executable.

For a more thorough description of *make(1)*, please refers to its help.

Options:
      -h or --help              Print usage.

Targets:

      busybox                 Compile a static version of busybox(1).
      initramfs.cpio          Create the InitRAMFS cpio archive to used with the
                              kernel image.
      runqemu                 Run the kernel image and userland rootfs in
                              qemu(1).

Variables:

QEMUFLAGS                     Additional flags given to system qemu.
CMDLINE                       Set the kernel command-line.
EOF
}

parse_arguments() {
	local make_jobs
	make_jobs=()
	make_flags=()
	while [ "$#" -ne 0 ]; do
		if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
			usage
			exit 0
		elif [[ $1 =~ ^O= ]]; then
			KMAKE_OUTPUT="${1/O=/}"
			export KMAKE_OUTPUT
			make_flags+=("$1")
		elif [[ $1 =~ ^-j[0-9]*$ ]] || [[ $1 =~ ^--jobs(|=[0-9]*)$ ]]; then
			case "$1" in
			-j|--jobs)
				make_jobs+=("$1")
				if [[ $2 =~ ^[0-9]*$ ]]; then
					shift
					make_jobs+=("$1")
				fi
				;;
			*)
				make_jobs+=("$1")
				;;
			esac
			echo make_jobs= "${make_jobs[@]}" >&2
			echo \#make_jobs= "${#make_jobs[@]}" >&2
			KMAKE_JOBS="${make_jobs[@]}"
			export KMAKE_JOBS
		else
			make_flags+=("$1")
		fi
		shift
	done
}

# Intercept -h/--help and -j/--jobs options and O= variable
parse_arguments "$@"

KMAKEFLAGS="${make_flags[@]}" \
exec make "${kmake_flags[@]}" "${make_flags[@]}"
